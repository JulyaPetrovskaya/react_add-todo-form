{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","classNames","TodoList","todos","map","validRegex","App","useState","usersFromServer","users","getUser","find","initialTodos","todosFromServer","setTodos","setTitle","titleError","setTitleError","setUserId","selectFieldError","setSelectFieldError","action","method","onSubmit","event","todoList","preventDefault","trim","match","newTodo","currentTodos","addTodo","Math","max","htmlFor","type","placeholder","value","onChange","e","target","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74350aba.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../../types/Users';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype TodoListProps = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo\n        key={todo.id}\n        todo={todo}\n      />\n    ))}\n  </section>\n);\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { User } from './types/Users';\n\nconst validRegex = /^[A-Za-z\\u0400-\\u04FF0-9\\s]+$/;\n\nconst inputValidation = (text: string) => {\n  return text.trim().match(validRegex);\n};\n\nexport const App = () => {\n  const [users] = useState<User[]>(usersFromServer);\n\n  const getUser = (userId: number) => {\n    const foundUser = usersFromServer.find(user => user.id === userId);\n\n    return foundUser || null;\n  };\n\n  const initialTodos: Todo[] = todosFromServer.map(todo => ({\n    ...todo,\n    user: getUser(todo.userId),\n  }));\n\n  const [todos, setTodos] = useState(initialTodos);\n\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [selectFieldError, setSelectFieldError] = useState(false);\n\n  const addTodo = (newTodo: Todo) => {\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  const getMaxId = (todoList: Todo[]) => {\n    const maxId = Math.max(...todoList.map(todo => todo.id));\n\n    return maxId + 1;\n  };\n\n  function handleSubmit(event: React.FormEvent) {\n    event.preventDefault();\n\n    setTitleError(false);\n    setSelectFieldError(false);\n\n    if (!inputValidation(title) || title.trim() === '') {\n      setTitleError(true);\n    }\n\n    if (!userId) {\n      setSelectFieldError(true);\n    }\n\n    if (titleError || selectFieldError) {\n      return;\n    }\n\n    const newTodo: Todo = {\n      id: getMaxId(todos),\n      title,\n      userId,\n      completed: false,\n      user: users.find(user => user.id === userId) || null,\n    };\n\n    addTodo(newTodo);\n\n    // reset form\n    setTitle('');\n    setUserId(0);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" method=\"POST\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"title\">\n            Title:&nbsp;\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter the title\"\n              value={title}\n              onChange={e => setTitle(e.target.value)}\n            />\n          </label>\n\n          {titleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">\n            User:&nbsp;\n            <select\n              data-cy=\"userSelect\"\n              value={userId}\n              onChange={e => setUserId(Number(e.target.value))}\n            >\n              <option value=\"0\" disabled>\n                Choose a user\n              </option>\n              {users.map((user) => (\n                <option key={user.id} value={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {selectFieldError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}